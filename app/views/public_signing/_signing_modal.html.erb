<!-- Signature Modal -->
<div data-field-signing-target="modal" class="hidden fixed inset-0 flex items-center justify-center z-[1000]" id="signingModal">
  <div class="relative bg-white rounded-lg shadow-xl max-w-lg w-full mx-4 z-[1001] overflow-hidden">
    <div class="p-4 border-b border-gray-200 flex justify-between items-center bg-blue-50">
      <h3 class="text-xl font-semibold text-gray-800">Complete Field</h3>
      <button type="button" data-action="click->field-signing#closeModal" class="text-gray-500 hover:text-gray-700" id="closeModalButton">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Signature Content -->
    <div class="modal-content p-6" data-field-type="signature">
      <div class="mb-4">
        <h4 class="text-lg font-medium text-gray-700 mb-2">Draw Your Signature</h4>
        <p class="text-sm text-gray-500">Use your mouse or finger to sign below.</p>
      </div>
      
      <div class="bg-gray-50 border border-gray-300 rounded-md overflow-hidden mb-4"
           data-controller="signature-pad"
           data-signature-pad-color-value="#000000"
           data-signature-pad-line-width-value="3"
           data-action="signature-pad:save->field-signing#signatureComplete">
        
        <div class="relative">
          <!-- Use separate canvas ID for signature to avoid conflicts -->
          <canvas id="signatureCanvas" data-signature-pad-target="canvas" class="w-full h-56 touch-none" style="position: relative; z-index: 1002; background-color: #FFFFFF;"></canvas>
        </div>
        
        <div class="p-3 flex justify-between bg-white border-t border-gray-200">
          <button type="button" 
                  class="px-4 py-2 text-base border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                  data-action="click->signature-pad#clear">Clear</button>
                  
          <button type="button"
                  class="px-4 py-2 text-base bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  data-action="click->signature-pad#save">Save Signature</button>
        </div>
      </div>
    </div>
    
    <!-- Initials Content -->
    <div class="modal-content p-6 hidden" data-field-type="initials">
      <div class="mb-4">
        <h4 class="text-lg font-medium text-gray-700 mb-2">Draw Your Initials</h4>
        <p class="text-sm text-gray-500">Use your mouse or finger to enter your initials below.</p>
      </div>
      
      <div class="bg-gray-50 border border-gray-300 rounded-md overflow-hidden mb-4"
           data-controller="signature-pad"
           data-signature-pad-color-value="#000000"
           data-signature-pad-line-width-value="3"
           data-action="signature-pad:save->field-signing#signatureComplete">
        
        <div class="relative">
          <!-- Use separate canvas ID for initials to avoid conflicts -->
          <canvas id="initialsCanvas" data-signature-pad-target="canvas" class="w-full h-48 touch-none" style="position: relative; z-index: 1002; background-color: #FFFFFF;"></canvas>
        </div>
        
        <div class="p-3 flex justify-between bg-white border-t border-gray-200">
          <button type="button" 
                  class="px-4 py-2 text-base border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                  data-action="click->signature-pad#clear">Clear</button>
                  
          <button type="button"
                  class="px-4 py-2 text-base bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  data-action="click->signature-pad#save">Save Initials</button>
        </div>
      </div>
    </div>
    
    <!-- Text Input Content -->
    <div class="modal-content p-6 hidden" data-field-type="text">
      <div class="mb-4">
        <h4 class="text-lg font-medium text-gray-700 mb-2">Enter Text</h4>
        <p class="text-sm text-gray-500">Type the requested information below.</p>
      </div>
      
      <form data-action="submit->field-signing#textComplete">
        <div class="mb-4">
          <input type="text" 
                 class="w-full px-4 py-3 text-base border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                 placeholder="Enter your text here" 
                 required>
        </div>
        
        <div class="flex justify-end">
          <button type="submit" 
                  class="px-5 py-2 text-base bg-blue-600 text-white rounded-md hover:bg-blue-700">
            Save Text
          </button>
        </div>
      </form>
    </div>
    
    <!-- Date Input Content -->
    <div class="modal-content p-6 hidden" data-field-type="date">
      <div class="mb-4">
        <h4 class="text-lg font-medium text-gray-700 mb-2">Select Date</h4>
        <p class="text-sm text-gray-500">Choose a date from the calendar.</p>
      </div>
      
      <form data-action="submit->field-signing#dateComplete">
        <div class="mb-4">
          <input type="date" 
                 class="w-full px-4 py-3 text-base border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                 required>
        </div>
        
        <div class="flex justify-end">
          <button type="submit" 
                  class="px-5 py-2 text-base bg-blue-600 text-white rounded-md hover:bg-blue-700">
            Save Date
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Separate backdrop element to avoid z-index conflicts -->
<div id="modalBackdrop" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[999]"></div>

<%# Enhanced JavaScript for modal handling %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log("Signing modal partial loaded - setting up enhanced handlers");
    
    // Create backdrop if it doesn't exist
    let backdrop = document.getElementById('modalBackdrop');
    if (!backdrop) {
      backdrop = document.createElement('div');
      backdrop.id = 'modalBackdrop';
      backdrop.className = 'hidden fixed inset-0 bg-black bg-opacity-50 z-[999]';
      document.body.appendChild(backdrop);
    }
    
    // Direct modal reference
    const modal = document.getElementById('signingModal');
    
    // Improved close function to prevent black screen issues
    function closeModalSafely() {
      console.log("Safely closing modal");
      
      // First hide the modal
      if (modal) modal.classList.add('hidden');
      if (backdrop) backdrop.classList.add('hidden');
      
      // Ensure body is visible and scrollable
      document.body.style.removeProperty('overflow');
      document.body.style.removeProperty('display');
      document.body.style.display = 'block';
      
      // Remove any possible full-screen overlays
      document.querySelectorAll('.fixed.inset-0').forEach(el => {
        if (el !== modal && el !== backdrop) {
          console.log("Removing additional overlay:", el);
          if (el.classList.contains('hidden')) return;
          el.classList.add('hidden');
        }
      });
      
      // Resume PDF rendering
      document.dispatchEvent(new CustomEvent('pdf-viewer:resume'));
      
      // Force redraw
      setTimeout(() => {
        document.body.style.opacity = 0.99;
        setTimeout(() => document.body.style.opacity = 1, 10);
      }, 10);
    }
    
    // Manual closing via button
    const closeBtn = document.getElementById('closeModalButton');
    if (closeBtn) {
      closeBtn.addEventListener('click', function(e) {
        console.log("Manual close button clicked");
        e.preventDefault();
        e.stopPropagation();
        closeModalSafely();
      });
    }
    
    // Add direct close handler for stimulus controller failures
    window.closeSigningModal = closeModalSafely;
    
    // Backdrop click should close modal
    backdrop.addEventListener('click', function() {
      console.log("Backdrop clicked");
      closeModalSafely();
    });
    
    // Add emergency close handler with keyboard escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        console.log("Escape key pressed while modal open");
        closeModalSafely();
      }
    });
    
    // Show backdrop when modal opens
    if (modal) {
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.attributeName === 'class') {
            if (!modal.classList.contains('hidden')) {
              console.log("Modal opened - showing backdrop");
              backdrop.classList.remove('hidden');
              
              // Pause any PDF rendering operations
              document.dispatchEvent(new CustomEvent('pdf-viewer:pause'));
            } else {
              console.log("Modal closed - hiding backdrop");
              backdrop.classList.add('hidden');
              
              // Resume PDF rendering operations
              document.dispatchEvent(new CustomEvent('pdf-viewer:resume'));
              
              // Ensure body is visible
              document.body.style.display = 'block';
            }
          }
        });
      });
      
      observer.observe(modal, { attributes: true });
    }
    
    // Direct handling for signature pad buttons
    document.querySelectorAll('[data-action="click->signature-pad#clear"]').forEach(button => {
      button.addEventListener('click', function() {
        console.log("Clear button clicked - direct handler");
        const padDiv = this.closest('[data-controller="signature-pad"]');
        if (padDiv) {
          const canvas = padDiv.querySelector('canvas');
          if (canvas) {
            const context = canvas.getContext('2d');
            context.clearRect(0, 0, canvas.width, canvas.height);
            
            // Also disable save button
            const saveButton = padDiv.querySelector('[data-action="click->signature-pad#save"]');
            if (saveButton) {
              saveButton.disabled = true;
              saveButton.classList.add('opacity-50', 'cursor-not-allowed');
              saveButton.classList.remove('hover:bg-blue-700');
            }
          }
        }
      });
    });
    
    // Direct handling for signature pad save buttons
    document.querySelectorAll('[data-action="click->signature-pad#save"]').forEach(button => {
      button.addEventListener('click', function() {
        console.log("Save button clicked - direct handler");
        const padDiv = this.closest('[data-controller="signature-pad"]');
        if (padDiv) {
          const canvas = padDiv.querySelector('canvas');
          if (canvas) {
            // Create a custom event similar to what the Stimulus controller would do
            const signatureData = canvas.toDataURL('image/png');
            const event = new CustomEvent('signature-pad:save', {
              detail: { signatureData },
              bubbles: true,
              cancelable: true
            });
            
            padDiv.dispatchEvent(event);
            
            // If not handled by controller, close modal directly
            setTimeout(() => {
              if (!modal.classList.contains('hidden')) {
                console.log("Fallback: closing modal after save");
                closeModalSafely();
              }
            }, 500);
          }
        }
      });
    });
    
    // Improved mouse/touch drawing on canvas
    document.querySelectorAll('[data-signature-pad-target="canvas"]').forEach(canvas => {
      let isDrawing = false;
      let lastX = 0;
      let lastY = 0;
      
      // Helper to get correct coordinates
      function getCanvasCoordinates(e) {
        const rect = canvas.getBoundingClientRect();
        const scaleX = canvas.width / rect.width;
        const scaleY = canvas.height / rect.height;
        
        if (e.type.includes('touch')) {
          return {
            x: (e.touches[0].clientX - rect.left) * scaleX,
            y: (e.touches[0].clientY - rect.top) * scaleY
          };
        } else {
          return {
            x: (e.clientX - rect.left) * scaleX,
            y: (e.clientY - rect.top) * scaleY
          };
        }
      }
      
      // Mouse events
      canvas.addEventListener('mousedown', function(e) {
        e.preventDefault();
        isDrawing = true;
        const ctx = canvas.getContext('2d');
        const coords = getCanvasCoordinates(e);
        
        lastX = coords.x;
        lastY = coords.y;
        
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineWidth = 3;
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.strokeStyle = '#000000';
        
        // Start listening for mouse movements
        document.addEventListener('mousemove', drawMouse);
        document.addEventListener('mouseup', stopDrawing);
      });
      
      // Touch events for mobile devices
      canvas.addEventListener('touchstart', function(e) {
        if (e.touches.length !== 1) return;
        e.preventDefault();
        
        isDrawing = true;
        const ctx = canvas.getContext('2d');
        const coords = getCanvasCoordinates(e);
        
        lastX = coords.x;
        lastY = coords.y;
        
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineWidth = 3;
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.strokeStyle = '#000000';
        
        // Start listening for touch movements
        canvas.addEventListener('touchmove', drawTouch);
        canvas.addEventListener('touchend', stopDrawingTouch);
      });
      
      function drawMouse(e) {
        if (!isDrawing) return;
        e.preventDefault();
        
        const ctx = canvas.getContext('2d');
        const coords = getCanvasCoordinates(e);
        
        ctx.lineTo(coords.x, coords.y);
        ctx.stroke();
        
        lastX = coords.x;
        lastY = coords.y;
      }
      
      function drawTouch(e) {
        if (!isDrawing || e.touches.length !== 1) return;
        e.preventDefault();
        
        const ctx = canvas.getContext('2d');
        const coords = getCanvasCoordinates(e);
        
        ctx.lineTo(coords.x, coords.y);
        ctx.stroke();
        
        lastX = coords.x;
        lastY = coords.y;
      }
      
      function stopDrawing() {
        if (!isDrawing) return;
        isDrawing = false;
        
        // Remove event listeners
        document.removeEventListener('mousemove', drawMouse);
        document.removeEventListener('mouseup', stopDrawing);
        
        // Enable save button
        enableSaveButton();
      }
      
      function stopDrawingTouch() {
        if (!isDrawing) return;
        isDrawing = false;
        
        // Remove event listeners
        canvas.removeEventListener('touchmove', drawTouch);
        canvas.removeEventListener('touchend', stopDrawingTouch);
        
        // Enable save button
        enableSaveButton();
      }
      
      function enableSaveButton() {
        const padDiv = canvas.closest('[data-controller="signature-pad"]');
        if (padDiv) {
          const saveButton = padDiv.querySelector('[data-action="click->signature-pad#save"]');
          if (saveButton) {
            saveButton.disabled = false;
            saveButton.classList.remove('opacity-50', 'cursor-not-allowed');
            saveButton.classList.add('hover:bg-blue-700');
          }
        }
      }
    });
  });
</script> 